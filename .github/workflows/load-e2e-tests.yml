name: Validate Load Test and Playwright E2E

on:
  push:
    branches:
      - feature/validate-load-test-results

jobs:
  push_to_registry:
    uses: ./.github/workflows/local-env-docker-build-and-push.yml
    secrets: inherit

  deploy_and_test:
    runs-on: ubuntu-24.04
    needs: push_to_registry

    steps:
      - name: Checkout local-env
        uses: actions/checkout@v4
        with:
          repository: TourmalineCore/pelican-local-env

      - name: Deploy Local Env to Kind k8s
        uses: devcontainers/ci@v0.3
        with:
          runCmd: |
            sed -i "0,/tag:.*/s//tag: \"local-env-sha-${{ github.sha }}\"/" deploy/values-ui.yaml.gotmpl
            kind create cluster --name pelican --config kind-local-config.yaml --kubeconfig ./.pelican-cluster-kubeconfig
            export KUBECONFIG=$(pwd)/.pelican-cluster-kubeconfig
            helmfile --environment local --namespace local -f deploy/helmfile.yaml apply
          push: never
          env: |
              PELICAN_UI_BRANCH=${{ github.head_ref || github.ref_name }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Cache playwright browsers
        id: cache-playwrightbrowsers
        uses: actions/cache@v4
        env:
          cache-name: cache-playwright-browsers
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.0

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install Playwright Browsers
        if: steps.cache-playwrightbrowsers.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      - name: Run Playwright E2E Tests
        run: npm run playwright:run:e2e ./playwright-tests/e2e/cms-integration/integration --reporter=html
        env:
          FRONTEND_URL: http://localhost:40110
          API_URL: http://localhost:40110/cms/api

      - name: Upload HTML Report (Playwright)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-html-report-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 7

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run Artillery load test - Home Page
        run: artillery run ./load-tests/home.yml -o home-report.json

      - name: Run Artillery load test - Documents Page
        run: artillery run ./load-tests/documents.yml -o documents-report.json

      - name: Run Artillery load test - News Page
        run: artillery run ./load-tests/news.yml -o news-report.json

      - name: Check Artillery thresholds
        run: |
          jq 'if .aggregate.latency.p95 > 2000 then exit(1) else exit(0) end' home-report.json
          jq 'if .aggregate.latency.p95 > 2000 then exit(1) else exit(0) end' documents-report.json
          jq 'if .aggregate.latency.p95 > 2000 then exit(1) else exit(0) end' news-report.json

      - name: Upload HTML Report (Artillery)
        run: |
          mkdir -p artillery-reports
          artillery report --output artillery-reports/home.html home-report.json
          artillery report --output artillery-reports/documents.html documents-report.json
          artillery report --output artillery-reports/news.html news-report.json

      - name: Upload Artillery HTML Reports
        uses: actions/upload-artifact@v4
        with:
          name: artillery-html-reports
          path: artillery-reports
          retention-days: 7
