name: Scheduled E2E and Load Tests

on:
  push:
    branches:
      - feature/validate-load-test-results
      
jobs:
  run-playwright-e2e-tests:
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        node-version: [20.18.0]

    steps:
      - name: Checkout local-env
        uses: actions/checkout@v4
        with:
          repository: TourmalineCore/pelican-local-env

      - name: Deploy Local Env to Kind k8s
        uses: devcontainers/ci@v0.3
        with:
          runCmd: |
            # we need to override "latest" image tag of ui inside local-env to run e2e against the current commit ui version and not against latest from master
            yq -i '.image.tag = "local-env-sha-${{ github.sha }}"' deploy/values-ui.yaml.gotmpl

            kind create cluster --name pelican --config kind-local-config.yaml --kubeconfig ./.pelican-cluster-kubeconfig
            
            export KUBECONFIG=$(pwd)/.pelican-cluster-kubeconfig

            helmfile --environment local --namespace local -f deploy/helmfile.yaml apply
          push: never
          # this variable is used by local-env helmfile to use current feature branch helm chart values.yaml file
          # this is needed for a case when as part of the feature the chart was changed and is different from master branch
          # this should properly fill the feature branch name in spite of the pipeline trigger source (PR, commit, etc.)
          # https://stackoverflow.com/a/71158878
          env: |
              PELICAN_UI_BRANCH=${{ github.head_ref || github.ref_name }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  
      # let's cache the binaries of installed browsers that we don't re-install them every time from scratch
      - name: Cache playwright browsers
        id: cache-playwrightbrowsers
        uses: actions/cache@v4
        env:
          cache-name: cache-playwright-browsers
        with:
          # caching browsers binaries
          # this path is taken from here https://playwright.dev/docs/browsers#managing-browser-binaries
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Install StepCI
        run: npm install -g stepci

      - name: Run load tests
        run: |
          set -e
          stepci run --loadtest ./load-tests/loadtestHomePage.yml > loadtestHomePage-report.txt
          stepci run --loadtest ./load-tests/loadtestDocumentsPage.yml > loadtestDocumentsPage-report.txt
          stepci run --loadtest ./load-tests/loadtestNewsPage.yml > loadtestNewsPage-report.txt
        env:
          HOST: http://chelzoo.ru

      - name: Validate load test thresholds
        run: |
          validate_report() {
            FILE="$1"
            MAX_LIMIT="$2"
            AVG_LIMIT="$3"

            echo "Validating $FILE"

            MAX=$(grep -Po '"max":\s*\K\d+' "$FILE" | head -1)
            AVG=$(grep -Po '"mean":\s*\K\d+' "$FILE" | head -1)
            ERRORED=$(grep -Po '"errors":\s*\K\d+' "$FILE" | head -1)

            echo "Parsed values: max=$MAX, avg=$AVG, errored=$ERRORED"

            [[ -z "$MAX" || -z "$AVG" || -z "$ERRORED" ]] && {
              echo "❌ Could not parse metrics from $FILE"
              exit 1
            }

            if [ "$MAX" -ge "$MAX_LIMIT" ]; then
              echo "❌ Max response time ($MAX ms) exceeds threshold ($MAX_LIMIT ms)"
              exit 1
            fi

            if [ "$AVG" -ge "$AVG_LIMIT" ]; then
              echo "❌ Avg response time ($AVG ms) exceeds threshold ($AVG_LIMIT ms)"
              exit 1
            fi

            if [ "$ERRORED" -ne 0 ]; then
              echo "❌ There are errored steps: $ERRORED"
              exit 1
            fi

            echo "✅ $FILE passed all checks"
          }

          # threshold: max < 10000, avg < 1500, errors == 0
          validate_report loadtestHomePage-report.txt 10000 1500
          validate_report loadtestDocumentsPage-report.txt 10000 1500
          validate_report loadtestNewsPage-report.txt 10000 1500
      # - name: Install Playwright Browsers
      #   if: steps.cache-playwrightbrowsers.outputs.cache-hit != 'true'
      #   run: npx playwright install chromium --with-deps

      # - name: Playwright run
      #   run: npm run playwright:run:e2e ./playwright-tests/e2e/load-validation --reporter=html 
    
      #   env:
      #     FRONTEND_URL: http://localhost:40110 
      #     API_URL: 'http://localhost:40110/cms/api'

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 7

      - name: Archive reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports--attempt-${{ github.run_attempt }}
          path: |
            playwright-report/
            loadtest-*.html
          retention-days: 7
